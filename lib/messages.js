// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Core = exports.Core = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineCore()

function defineCore () {
  var enc = [
    encodings.bytes,
    encodings.bool,
    encodings.string
  ]

  Core.encodingLength = encodingLength
  Core.encode = encode
  Core.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = enc[0].encodingLength(obj.key)
    length += 1 + len
    if (!defined(obj.seed)) throw new Error("seed is required")
    var len = enc[1].encodingLength(obj.seed)
    length += 1 + len
    if (!defined(obj.writable)) throw new Error("writable is required")
    var len = enc[1].encodingLength(obj.writable)
    length += 1 + len
    if (!defined(obj.sparse)) throw new Error("sparse is required")
    var len = enc[1].encodingLength(obj.sparse)
    length += 1 + len
    if (defined(obj.valueEncoding)) {
      var len = enc[2].encodingLength(obj.valueEncoding)
      length += 1 + len
    }
    if (defined(obj.name)) {
      var len = enc[2].encodingLength(obj.name)
      length += 1 + len
    }
    if (defined(obj.description)) {
      var len = enc[2].encodingLength(obj.description)
      length += 1 + len
    }
    if (defined(obj.prefetch)) {
      var len = enc[0].encodingLength(obj.prefetch)
      length += 1 + len
    }
    if (defined(obj.discoveryKey)) {
      var len = enc[0].encodingLength(obj.discoveryKey)
      length += 1 + len
    }
    if (defined(obj.type)) {
      var len = enc[2].encodingLength(obj.type)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    enc[0].encode(obj.key, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.seed)) throw new Error("seed is required")
    buf[offset++] = 16
    enc[1].encode(obj.seed, buf, offset)
    offset += enc[1].encode.bytes
    if (!defined(obj.writable)) throw new Error("writable is required")
    buf[offset++] = 24
    enc[1].encode(obj.writable, buf, offset)
    offset += enc[1].encode.bytes
    if (!defined(obj.sparse)) throw new Error("sparse is required")
    buf[offset++] = 32
    enc[1].encode(obj.sparse, buf, offset)
    offset += enc[1].encode.bytes
    if (defined(obj.valueEncoding)) {
      buf[offset++] = 42
      enc[2].encode(obj.valueEncoding, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.name)) {
      buf[offset++] = 50
      enc[2].encode(obj.name, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.description)) {
      buf[offset++] = 58
      enc[2].encode(obj.description, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.prefetch)) {
      buf[offset++] = 66
      enc[0].encode(obj.prefetch, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.discoveryKey)) {
      buf[offset++] = 74
      enc[0].encode(obj.discoveryKey, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.type)) {
      buf[offset++] = 82
      enc[2].encode(obj.type, buf, offset)
      offset += enc[2].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: null,
      seed: false,
      writable: false,
      sparse: false,
      valueEncoding: "",
      name: "",
      description: "",
      prefetch: null,
      discoveryKey: null,
      type: ""
    }
    var found0 = false
    var found1 = false
    var found2 = false
    var found3 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2 || !found3) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.seed = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found1 = true
        break
        case 3:
        obj.writable = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found2 = true
        break
        case 4:
        obj.sparse = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found3 = true
        break
        case 5:
        obj.valueEncoding = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        case 6:
        obj.name = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        case 7:
        obj.description = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        case 8:
        obj.prefetch = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 9:
        obj.discoveryKey = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 10:
        obj.type = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
